#!/usr/bin/env node

const startLaunchTime = Date.now();

// eslint-disable-next-line no-unused-vars -- Imported for side effects
const config = require('../source/config');
const open = require('open');
const path = require('path');
const child_process = require('child_process');
const { encodePath } = require('../source/address-parser');

const BugTracker = require('../source/bugtracker');
const bugtracker = new BugTracker('launcher');
// Fastest way to find out if a port is used or not/i.e. if ungit is running
const net = require('net');
const server = net.createServer();
const cleanExit = () => process.exit();

process.on('SIGINT', cleanExit); // catch ctrl-c
process.on('SIGTERM', cleanExit); // catch kill
process.on('uncaughtException', (err) => {
  console.error(err.stack.toString());

  bugtracker.notify(err, 'ungit-launcher');
  cleanExit();
});

const openUngitBrowser = (pathToNavigateTo) => {
  console.log(`Navigate to ${pathToNavigateTo}`);
  return open(pathToNavigateTo).catch((err) =>
    console.log(`failed to navigate to ${pathToNavigateTo}`, err)
  );
};

const navigate = () => {
  let url = config.urlBase + ':' + config.port;
  if (config.forcedLaunchPath === undefined) {
    url += '/#/repository?path=' + encodePath(process.cwd());
  } else if (config.forcedLaunchPath !== null && config.forcedLaunchPath !== '') {
    url += '/#/repository?path=' + encodePath(config.forcedLaunchPath);
  }

  if (config.launchCommand) {
    const command = config.launchCommand.replace(/%U/g, url);
    console.log(`Running custom launch command: ${command}`);
    child_process.exec(command, (err, stdout, stderr) => {
      if (err) {
        console.log('Failed to exec custom launchCommand', err, stderr);
        return;
      }
      if (config.launchBrowser) {
        openUngitBrowser(url);
      }
    });
  } else if (config.launchBrowser) {
    openUngitBrowser(url);
  }
};

const launch = () => {
  const child = child_process.spawn(
    process.argv[0], // because it's `nodejs` in some OS
    [path.join(__dirname, '..', 'source', 'server.js')].concat(process.argv.slice(2)),
    { cwd: path.join(process.cwd(), '..') }
  );

  child.on('exit', (res) => {
    console.log('Stopped keeping ungit alive');
  });

  const startupListener = (data) => {
    if (data.toString().indexOf('## Ungit started ##') >= 0) {
      child.removeListener('stdout', startupListener);
      child.stdout.on('data', (data) => console.log(data.toString().trim()));
      const launchTime = Date.now() - startLaunchTime;
      console.log(data.toString());
      console.log(`Took ${launchTime}ms to start server.`);
      navigate();
    }
  };

  child.stdout.on('data', startupListener);
  child.stderr.on('data', (data) => console.log(`stderr: ${data.toString().trim()}`));
};

server.listen({ port: config.port, host: config.ungitBindIp }, (err) => {
  server.close(launch);
});
server.on('error', (e) => {
  if (e.code == 'EADDRINUSE') {
    console.log('Ungit server already running');
    navigate();
  } else {
    console.error('Failed to run server: ', e);
    process.exit(1);
  }
});
